(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{805:function(e,t,a){"use strict";a.r(t);var s=a(1),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),a("p",[e._v("Now that you've defined messages that trigger state transitions, it's time to implement types and methods that operate on the state.")]),e._v(" "),a("p",[e._v("A keeper is an abstraction that let's your blockchain app interact with the state. Functions like create, update and delete are defined as keeper methods. In the Scavenge blockchain a "),a("code",[e._v("scavenge")]),e._v(" and "),a("code",[e._v("commit")]),e._v(" types need to be defined, along with create and update methods.")]),e._v(" "),a("p",[e._v("Starport has several commands that scaffold the code for CRUD functionality for a list-like data structure, a map (key-value pairs) and a single element in the state. In this example, both "),a("code",[e._v("scavenge")]),e._v(" and "),a("code",[e._v("commit")]),e._v(" will be stored in a map-like data structure.")]),e._v(" "),a("h2",{attrs:{id:"scavenge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scavenge"}},[e._v("#")]),e._v(" Scavenge")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("starport scaffold map")]),e._v(" command to scaffold the "),a("code",[e._v("scavenge")]),e._v(" type and the code for creating, reading, updating, and deleting (CRUD) scavenges. The first argument is the name of the type being created ("),a("code",[e._v("scavenge")]),e._v("), the rest is list of fields. By default, generic CRUD messages are scaffolded, but since you've already created messages specifically for this blockchain, skip messages with a "),a("code",[e._v("--no-message")]),e._v(" flag.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"undefined",base64:"c3RhcnBvcnQgc2NhZmZvbGQgbWFwIHNjYXZlbmdlIHNvbHV0aW9uSGFzaCBzb2x1dGlvbiBkZXNjcmlwdGlvbiByZXdhcmQgc2NhdmVuZ2VyIC0tbm8tbWVzc2FnZQo="}}),e._v(" "),a("p",[a("code",[e._v("starport scaffold map")]),e._v(" created and modified several files:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("proto/scavenge/scavenge.proto")]),e._v(": the "),a("code",[e._v("Scavenge")]),e._v(" type defined as a proto message.")]),e._v(" "),a("li",[a("code",[e._v("proto/scavenge/query.proto")]),e._v(": queries to get data from the blockchain defined as proto messages and registered in the "),a("code",[e._v("Query")]),e._v(" service.")]),e._v(" "),a("li",[a("code",[e._v("proto/scavenge/genesis.proto")]),e._v(": a type for exporting the state of the blockchain (for example, during software upgrades)")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/keeper/grpc_query_scavenge.go")]),e._v(": keeper methods to query the blockchain.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/keeper/grpc_query_scavenge_test.go")]),e._v(": tests for query keeper methods.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/keeper/scavenge.go")]),e._v(": keper methods to get, set and remove scavenges from the store.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/keeper/scavenge_test.go")]),e._v(": tests for keeper methods.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/client/cli/query_scavenge.go")]),e._v(": CLI commands for querying the blockchain.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/client/cli/query.go")]),e._v(": registering CLI commands.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/client/cli/query_scavenge_test.go")]),e._v(": tests for CLI commands.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/types/keys.go")]),e._v(": a string as a prefix in the key used to store scavenges in the state.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/genesis.go")]),e._v(": logic for importing and exporting the state.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/types/genesis.go")]),e._v(": logic for validating the genesis file.")]),e._v(" "),a("li",[a("code",[e._v("x/scavenge/module.go")]),e._v(": registering gRPC gateway routes.")])]),e._v(" "),a("p",[a("code",[e._v("SetScavenge")]),e._v(" in the "),a("code",[e._v("keeper")]),e._v(" package uses a key-value store using a prefix for the scavenge type ("),a("code",[e._v("Scavenge-value-")]),e._v(") encodes the "),a("code",[e._v("Scavenge")]),e._v(" type (that is generated from a protocol buffer definition) and uses "),a("code",[e._v("store.Set")]),e._v(" method to write a Scavenge into the store.")]),e._v(" "),a("p",[a("code",[e._v("GetScavenge")]),e._v(" selects a store using the scavenge prefix, and uses "),a("code",[e._v("store.Get")]),e._v(" to fetch a scavenge with a particular index.")]),e._v(" "),a("h2",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[e._v("#")]),e._v(" Commit")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("starport scaffold map")]),e._v(" to create the same logic for a "),a("code",[e._v("commit")]),e._v(" type.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"undefined",base64:"c3RhcnBvcnQgc2NhZmZvbGQgbWFwIGNvbW1pdCBzb2x1dGlvbkhhc2ggc29sdXRpb25TY2F2ZW5nZXJIYXNoIC0tbm8tbWVzc2FnZQo="}}),e._v(" "),a("p",[e._v("This concludes the transaction types that you need for the Scavenge app.")])],1)}),[],!1,null,null,null);t.default=o.exports}}]);