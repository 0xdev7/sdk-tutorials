(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{779:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"msgs-and-handlers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msgs-and-handlers"}},[t._v("#")]),t._v(" Msgs and Handlers")]),t._v(" "),s("p",[t._v("Now that you have the "),s("code",[t._v("Keeper")]),t._v(" setup, it is time to update the "),s("code",[t._v("Msgs")]),t._v(" and "),s("code",[t._v("Handlers")]),t._v(" so that users can buy names and set values for them.")]),t._v(" "),s("h2",{attrs:{id:"msgs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msgs"}},[t._v("#")]),t._v(" "),s("code",[t._v("Msgs")])]),t._v(" "),s("p",[s("code",[t._v("Msgs")]),t._v(" trigger state transitions. "),s("code",[t._v("Msgs")]),t._v(" are wrapped in "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/master/types/tx_msg.go#L34-L41",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Txs")]),s("OutboundLink")],1),t._v(" that clients submit to the network. The Cosmos SDK wraps and unwraps "),s("code",[t._v("Msgs")]),t._v(" from "),s("code",[t._v("Txs")]),t._v(", which means, as an app developer, you only have to define "),s("code",[t._v("Msgs")]),t._v(". "),s("code",[t._v("Msgs")]),t._v(" must satisfy the following interface (we'll implement all of these in the next section).")]),t._v(" "),s("p",[s("code",[t._v("./x/nameservice/types/msg.go")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Transactions messages must fulfill the Msg")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Msg "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return the message type.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Must be alphanumeric or empty.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns a human-readable string for the message, intended for utilization")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// within tags")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Route")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValidateBasic does a simple validation check that")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// doesn't require access to any other information.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValidateBasic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Error\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the canonical byte representation of the Msg.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSignBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Signers returns the addrs of signers that must sign.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CONTRACT: All signatures must be present to be valid.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CONTRACT: Returns addrs in some deterministic order.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSigners")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("AccAddress\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"handlers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handlers"}},[t._v("#")]),t._v(" "),s("code",[t._v("Handlers")])]),t._v(" "),s("p",[s("code",[t._v("Handlers")]),t._v(" define the action that needs to be taken (which stores need to get updated, how, and under what conditions) when a given "),s("code",[t._v("Msg")]),t._v(" is received.")]),t._v(" "),s("p",[t._v("In this module you have three types of "),s("code",[t._v("Msgs")]),t._v(" that users can send to interact with the application state: "),s("RouterLink",{attrs:{to:"/nameservice/tutorial/set-name.html"}},[s("code",[t._v("SetName")])]),t._v(", "),s("RouterLink",{attrs:{to:"/nameservice/tutorial/buy-name.html"}},[s("code",[t._v("BuyName")])]),t._v(" and "),s("RouterLink",{attrs:{to:"/nameservice/tutorial/delete-name.html"}},[s("code",[t._v("DeleteName")])]),t._v(". They will each have an associated "),s("code",[t._v("Handler")]),t._v(".")],1),t._v(" "),s("p",[t._v("We can see that a few files have already been scaffolded by the "),s("code",[t._v("type")]),t._v(" command, and we can modify these files to fit our needs for messages and handlers.")]),t._v(" "),s("p",[t._v("Now that you have a better understanding of "),s("code",[t._v("Msgs")]),t._v(" and "),s("code",[t._v("Handlers")]),t._v(", you can start building your first message: "),s("code",[t._v("SetName")])])])}),[],!1,null,null,null);e.default=n.exports}}]);