(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{801:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"get-your-xp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-your-xp"}},[t._v("#")]),t._v(" Get your XP")]),t._v(" "),a("p",[t._v("To get the "),a("code",[t._v("XP")]),t._v(" begin by signing up for our newsletter at our Sponsor Booth. To claim the "),a("code",[t._v("XP")]),t._v(" you'll need to build the Command Line Client for interacting with the Cosmos Burner Chain and generate a wallet. First make sure that you have "),a("a",{attrs:{href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"}},[t._v("installed golang v13.0 or newer"),a("OutboundLink")],1),t._v(" and that your "),a("code",[t._v("$GOPATH")]),t._v(" and "),a("code",[t._v("$GOROOT")]),t._v(" are correctly configured.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("go version\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOPATH")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOROOT")]),t._v("\n")])])]),a("p",[t._v("Now you can get the repo by cloning it directly with the correct branch ("),a("code",[t._v("okwme/minimal-scavenge")]),t._v("):")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone -b okwme/minimal-scavenge https://github.com/cosmos/peggy\n")])])]),a("p",[t._v("Afterwards you'll need to navigate into the newly downloaded directory and run "),a("code",[t._v("make install")]),t._v(" like:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" peggy\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("You may need to install "),a("code",[t._v("make")]),t._v(" and "),a("code",[t._v("make-guile")]),t._v(" before running "),a("code",[t._v("make install")])])]),t._v(" "),a("p",[t._v("This should result in building three binaries:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\ngo "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -mod"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("readonly ./cmd/ebd\ngo "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -mod"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("readonly ./cmd/ebcli\ngo "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -mod"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("readonly ./cmd/ebrelayer\n")])])]),a("p",[t._v("The first binary ("),a("code",[t._v("ebd")]),t._v(") is used for running a node within the network (we're just going to be connecting to a node that's already running). The second binary ("),a("code",[t._v("ebrelayer")]),t._v(") is for running a relayer between the burner chain and xDai. You won't be allowed to do this unless you also run a validator so we won't look further into it at this point. The third binary ("),a("code",[t._v("ebcli")]),t._v(") is the one we want. Try running the help command to see what it can do:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ebcli --help\nethereum bridge client\n\nUsage:\n  ebcli "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nAvailable Commands:\n  status      Query remote node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" status\n  config      Create or query an application CLI configuration "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n  query       Querying subcommands\n  tx          Transactions subcommands\n              \n  rest-server Start LCD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("light-client daemon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", a "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" REST server\n              \n  keys        Add or view "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" private keys\n              \n  version     Print the app version\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v("        Help about any "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v("\n\nFlags:\n      --chain-id string   Chain ID of tendermint node\n  -e, --encoding string   Binary encoding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("b64"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("btc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -h, --help              "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ebcli\n      --home string       directory "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" config and data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/root/.ebcli"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  -o, --output string     Output "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      --trace             print out full stack trace on errors\n\nUse "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ebcli [command] --help"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" information about a command.\n")])])]),a("p",[t._v("The first thing we'll want to do is add some values to the config of our CLI so you don't need to include them as flags with every other command. We add "),a("code",[t._v("indent")]),t._v(", "),a("code",[t._v("format")]),t._v(" to help with formatting the CLI results, We'll use "),a("code",[t._v("trust-node")]),t._v(" and "),a("code",[t._v("node")]),t._v(" to point our CLI to the active burner node at http://167.99.167.78:26657 where it is running with the "),a("code",[t._v("chain-id")]),t._v(" of "),a("code",[t._v("peggy")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ebcli config indent "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nebcli config output json\nebcli config chain-id peggy\nebcli config trust-node "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nebcli config node tcp://167.99.167.78:26657\n")])])]),a("p",[t._v("Next you'll want to generate a new account for this chain. You should come up with a nickname for this account that you can use to reference it while making other commands later on. This will also show you the mnemonic phrase that secures the account as well as the public key and your address as a bech32 encoded version of your public key with a cosmos prefix (the prefix can be modified per chain).")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ebcli keys "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" your-nickname\nEnter keyring passphrase:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your-nickname"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos15d0vljwtyxnrz9quuk2mj7mjfmjfg8wjfedm90"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pubkey"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmospub1addwnpepqwhkspe65ewjerceu5dckqcfpcku0znx3c6q0ll3whyngjzycx4awd8pn5p"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mnemonic"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("This is your new account! Now that you know your account "),a("strong",[t._v("address")]),t._v(", you need to send it to us so we can give you your "),a("code",[t._v("XP")]),t._v("! You can submit it via email to "),a("a",{attrs:{href:"mailto:billy@tendermint.com"}},[t._v("billy@tendermint.com")]),t._v(" with the email address you signed up for the survey with. I'll reply letting you know you've received the "),a("code",[t._v("XP")]),t._v(". Once you've received it you should be able to check your balance like this:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ebcli query account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("ebcli keys show your-nickname -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\nEnter keyring passphrase:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos-sdk/Account"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos15d0vljwtyxnrz9quuk2mj7mjfmjfg8wjfedm90"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coins"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"denom"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XP"')]),t._v(",\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"public_key"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmospub1addwnpepqwhkspe65ewjerceu5dckqcfpcku0znx3c6q0ll3whyngjzycx4awd8pn5p"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"account_number"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sequence"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("This uses the "),a("code",[t._v("ebcli keys")]),t._v(" as a sub-command to grab your account address and uses it as a parameter in the "),a("code",[t._v("ebcli query")]),t._v(" command.")]),t._v(" "),a("blockquote",[a("p",[t._v("If you have not yet received your "),a("code",[t._v("XP")]),t._v(" tokens, you will see an error that your account does not exist. That's because accounts are not registered within the chain's memory until they execute their first transaction or receive a balance in some token.")])]),t._v(" "),a("p",[a("strong",[t._v("NOTE")]),t._v(" This does not work yet because XP is non transferrable.\nOnce you have some "),a("code",[t._v("XP")]),t._v(" you can send it back to your Ethereum address on the BuffiDai xDai chain. To do this use the following command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ebcli tx ethbridge burn "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("ebcli keys show your-nickname -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" ETHEREUM_RECIPIENT_ADDRESS 10XP "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--from your-nickname "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--ethereum-chain-id "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--token-contract-address XP_TOKEN_ADDRESS\n")])])]),a("p",[t._v("You should be able to see the balance show up in your BuffiDao wallet!")])])}),[],!1,null,null,null);s.default=n.exports}}]);