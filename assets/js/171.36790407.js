(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{766:function(e,a,s){"use strict";s.r(a);var n=s(1),t=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"build-and-run-the-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-and-run-the-app"}},[e._v("#")]),e._v(" Build and run the app")]),e._v(" "),s("h2",{attrs:{id:"building-the-nameservice-application"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-the-nameservice-application"}},[e._v("#")]),e._v(" Building the "),s("code",[e._v("nameservice")]),e._v(" application")]),e._v(" "),s("p",[e._v("This repo contains a complete "),s("code",[e._v("nameservice")]),e._v(" application, scaffolded with starport. You should be able to run the application using "),s("code",[e._v("starport serve")]),e._v(" in the home directory:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ starport serve\n\n📦 Installing dependencies...\n🛠️  Building the app...\n🙂 Created an account. Password (mnemonic): insane flash movie sketch saddle antique mean season damp thunder tag reunion quantum sock cube early glimpse cabbage smile photo hill relax couch sweet\n🙂 Created an account. Password (mnemonic): whip bone crane flag lesson mule valley soup faith include october monkey volume iron mushroom cry acid case village clog abstract antenna wife eyebrow\n🌍 Running a Cosmos 'nameservice' app with Tendermint at http://localhost:26657.\n🌍 Running a server at http://localhost:1317 (LCD)\n\n🚀 Get started: http://localhost:12345/\n")])])]),s("p",[e._v("Now, you can install and run the application.")]),e._v(" "),s("p",[e._v("If you have not completed the tutorial then you can follow the below cloning instructions:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# Clone the source of the tutorial repository\ngit clone https://github.com/cosmos/sdk-tutorials.git\ncd sdk-tutorials\ncd nameservice/nameservice\nstarport serve\n")])])]),s("h2",{attrs:{id:"breaking-down-the-starport-serve-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#breaking-down-the-starport-serve-command"}},[e._v("#")]),e._v(" Breaking down the "),s("code",[e._v("starport serve")]),e._v(" command")]),e._v(" "),s("p",[e._v("Before running our application, "),s("code",[e._v("starport serve")]),e._v(" runs a build similar to that in our "),s("code",[e._v("Makefile")]),e._v(".")]),e._v(" "),s("p",[e._v("Afterwards, it initializes our "),s("code",[e._v("genesis.json")]),e._v(" file based on the contents of the "),s("code",[e._v("config.yml")]),e._v(" file. You can see we've defined two "),s("code",[e._v("accounts")]),e._v(" to the genesis, "),s("code",[e._v("user1")]),e._v(" and "),s("code",[e._v("user2")]),e._v(", and have set up "),s("code",[e._v("user1")]),e._v(" as the validator for the node we're going to run.")]),e._v(" "),s("p",[e._v("This setup can also be performed manually using the "),s("code",[e._v("nameserviced")]),e._v(" and "),s("code",[e._v("nameservicecli")]),e._v(" commands, which are available after the application is built.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf ~/.nameserviced\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf ~/.nameservicecli\n\nnameserviced init "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v(" --chain-id"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("namechain\n\nnameservicecli config output json\nnameservicecli config indent "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nnameservicecli config trust-node "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nnameservicecli config chain-id namechain\nnameservicecli config keyring-backend "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n\nnameservicecli keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" user1\nnameservicecli keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" user2\n\nnameserviced add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nameservicecli keys show user1 -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000nametoken,100000000stake\nnameserviced add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nameservicecli keys show user2 -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000nametoken,100000000stake\n\nnameserviced gentx --name user1 --keyring-backend "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Collecting genesis txs..."')]),e._v("\nnameserviced collect-gentxs\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Validating genesis file..."')]),e._v("\nnameserviced validate-genesis")])])]),s("blockquote",[s("p",[s("em",[s("em",[e._v("NOTE")])]),e._v(": If you have run the tutorial before, you can start from scratch with a "),s("code",[e._v("nameserviced unsafe-reset-all")]),e._v(" or by deleting both of the home folders "),s("code",[e._v("rm -rf ~/.nameservicecli ~/.nameserviced")])])]),e._v(" "),s("blockquote",[s("p",[s("em",[s("em",[e._v("NOTE")])]),e._v(": If you have the Cosmos app for ledger and you want to use it, when you create the key with "),s("code",[e._v("nameservicecli keys add user1")]),e._v(" just add "),s("code",[e._v("--ledger")]),e._v(" at the end. That's all you need. When you sign, "),s("code",[e._v("user1")]),e._v(" will be recognized as a Ledger key and will require a device.")])]),e._v(" "),s("blockquote",[s("p",[s("em",[s("em",[e._v("NOTE")])]),e._v(": The following commands combined with "),s("code",[e._v("rm -rf ~/.nameservicecli ~/.nameserviced")]),e._v(" are also collected in the "),s("code",[e._v("init.sh")]),e._v(" file in the root directory of this project. You can execute all of these commands using default values at once by running "),s("code",[e._v("./init.sh")]),e._v(" in your terminal.")])]),e._v(" "),s("blockquote",[s("p",[e._v("Note: There is not a need to specify an amount as by default it will set the minimum.")])]),e._v(" "),s("p",[e._v("After you have generated a genesis transaction, you will have to input the genTx into the genesis file, so that your nameservice chain is aware of the validators. To do so, run:")]),e._v(" "),s("p",[s("code",[e._v("nameserviced collect-gentxs")])]),e._v(" "),s("p",[e._v("and to make sure your genesis file is correct, run:")]),e._v(" "),s("p",[s("code",[e._v("nameserviced validate-genesis")])]),e._v(" "),s("p",[e._v("You can now start "),s("code",[e._v("nameserviced")]),e._v(" by calling "),s("code",[e._v("nameserviced start")]),e._v(". You will see logs begin streaming that represent blocks being produced, this will take a couple of seconds.")]),e._v(" "),s("p",[e._v("You have run your first node successfully.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# First check the accounts to ensure they have funds")]),e._v("\nnameservicecli query account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nameservicecli keys show user1 -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nnameservicecli query account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nameservicecli keys show user2 -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Buy your first name using your coins from the genesis file")]),e._v("\nnameservicecli tx nameservice buy-name user1.id 5nametoken --from user1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the value for the name you just bought")]),e._v("\nnameservicecli tx nameservice set-name user1.id "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8.8")]),e._v(".8.8 --from user1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a resolve query against the name you registered")]),e._v("\nnameservicecli query nameservice resolve user1.id\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# > 8.8.8.8")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a whois query against the name you just registered")]),e._v("\nnameservicecli query nameservice get-whois user1.id\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# > {"value":"8.8.8.8","owner":"cosmos1l7k5tdt2qam0zecxrx78yuw447ga54dsmtpk2s","price":[{"denom":"nametoken","amount":"5"}]}')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# user2 buys name from user1")]),e._v("\nnameservicecli tx nameservice buy-name user1.id 10nametoken --from user2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# user2 decides to delete the name she just bought from user1")]),e._v("\nnameservicecli tx nameservice delete-name user1.id --from user2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a whois query against the name you just deleted")]),e._v("\nnameservicecli query nameservice get-whois user1.id\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# > {"value":"","owner":"","price":[{"denom":"nametoken","amount":"1"}]}')]),e._v("\n")])])]),s("h1",{attrs:{id:"run-second-node-on-another-machine-optional"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-second-node-on-another-machine-optional"}},[e._v("#")]),e._v(" Run second node on another machine (Optional)")]),e._v(" "),s("p",[e._v("Open terminal to run commands against that just created to install nameserviced and nameservicecli")]),e._v(" "),s("h2",{attrs:{id:"init-use-another-moniker-and-same-namechain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init-use-another-moniker-and-same-namechain"}},[e._v("#")]),e._v(" init use another moniker and same namechain")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("nameserviced init "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("moniker-"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),e._v(" --chain-id namechain\n")])])]),s("h2",{attrs:{id:"overwrite-nameserviced-config-genesis-json-with-first-node-s-genesis-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overwrite-nameserviced-config-genesis-json-with-first-node-s-genesis-json"}},[e._v("#")]),e._v(" overwrite ~/.nameserviced/config/genesis.json with first node's genesis.json")]),e._v(" "),s("h2",{attrs:{id:"change-persistent-peers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#change-persistent-peers"}},[e._v("#")]),e._v(" change persistent_peers")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /.nameserviced/config/config.toml\npersistent_peers "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"id@first_node_ip:26656"')]),e._v("\n")])])]),s("p",[e._v("To find the node id of the first machine, run the following command on that machine:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("nameserviced tendermint show-node-id\n")])])]),s("h2",{attrs:{id:"start-this-second-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#start-this-second-node"}},[e._v("#")]),e._v(" start this second node")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("nameserviced start\n")])])]),s("h3",{attrs:{id:"congratulations-you-have-built-a-cosmos-sdk-application-this-tutorial-is-now-complete-if-you-want-to-see-how-to-run-the-same-commands-using-the-rest-server-you-ll-need-to-run-the-rest-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#congratulations-you-have-built-a-cosmos-sdk-application-this-tutorial-is-now-complete-if-you-want-to-see-how-to-run-the-same-commands-using-the-rest-server-you-ll-need-to-run-the-rest-server"}},[e._v("#")]),e._v(" Congratulations, you have built a Cosmos SDK application! This tutorial is now complete. If you want to see how to run the same commands using the REST server you'll need to run the REST server.")])])}),[],!1,null,null,null);a.default=t.exports}}]);