(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{721:function(t,e,a){"use strict";a.r(e);var s=a(1),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"liquidity-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#liquidity-module"}},[t._v("#")]),t._v(" Liquidity Module")]),t._v(" "),a("p",[t._v("The liquidity module, known on the Cosmos Hub as Gravity DEX, enables users to create liquidity pools and swap tokens.")]),t._v(" "),a("h2",{attrs:{id:"use-liquidity-pools-to-trade-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-liquidity-pools-to-trade-tokens"}},[t._v("#")]),t._v(" Use Liquidity Pools to Trade Tokens")]),t._v(" "),a("p",[t._v("When using your Cosmos SDK-based blockchains, you want to enable users to trade tokens. You can have multiple tokens on your blockchain or have tokens from external blockchains sent to your blocking using inter-blockchain communication Protocol (IBC).")]),t._v(" "),a("p",[t._v("The liquidity module allows users to use pools to trade those tokens on your blockchain. Each pool represents a token pair and allows the user to swap from one token to the other token.")]),t._v(" "),a("p",[t._v("In this tutorial, you create your own blockchain, send tokens to another blockchain, create a pool, deposit to a pool, withdraw from a pool, and swap tokens.")]),t._v(" "),a("p",[t._v("You can follow the "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=GxaqpzMk0jk&t=978s",target:"_blank",rel:"noopener noreferrer"}},[t._v("code with us session"),a("OutboundLink")],1),t._v(" for hands-on experience")]),t._v(" "),a("p",[a("strong",[t._v("Important")]),t._v(" In the code examples throughout this tutorial, when you see username be sure to substitute your username.")]),t._v(" "),a("p",[a("strong",[t._v("You will learn how to:")])]),t._v(" "),a("ul",[a("li",[t._v("Create a blockchain with Starport")]),t._v(" "),a("li",[t._v("Create your own token on your blockchain")]),t._v(" "),a("li",[t._v("Connect your blockchain to the testnet")]),t._v(" "),a("li",[t._v("Send your own token with IBC to the testnet")]),t._v(" "),a("li",[t._v("Create a pool with your token")]),t._v(" "),a("li",[t._v("Use the pool with your token")])]),t._v(" "),a("h2",{attrs:{id:"requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[t._v("#")]),t._v(" Requirements")]),t._v(" "),a("p",[t._v("Before you start the tutorial, install the prerequisite software.")]),t._v(" "),a("ul",[a("li",[a("p",[a("RouterLink",{attrs:{to:"/starport/"}},[t._v("Install Starport")]),t._v(" v0.17.3 or later")],1),t._v(" "),a("p",[a("strong",[t._v("Important")]),t._v(" This tutorial is supported for specific Starport and gaia versions and is not supported for older versions. Be sure to use:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/tendermint/starport",target:"_blank",rel:"noopener noreferrer"}},[t._v("Starport"),a("OutboundLink")],1),t._v(" v0.17.3")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/cosmos/gaia/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gaia"),a("OutboundLink")],1),t._v(" v5.0.5")])])]),t._v(" "),a("li",[a("p",[t._v("Install the Gravity DEX binary")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Clone the gaia repo:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/cosmos/gaia "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" gaia\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Check out the required version")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout v5.0.5\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Install the software:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Verify the gaiad version:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad version\n")])])]),a("p",[t._v("The output of "),a("code",[t._v("gaiad version")]),t._v(" prints something like:")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("v5.0.5\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"create-the-blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-the-blockchain"}},[t._v("#")]),t._v(" Create the Blockchain")]),t._v(" "),a("p",[t._v("Scaffold a new blockchain called "),a("code",[t._v("myblockchain")]),t._v(", replace "),a("code",[t._v("username")]),t._v(" with your username:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("starport scaffold chain github.com/username/myblockchain\n")])])]),a("p",[t._v("Change to the blockchain directory:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" myblockchain\n")])])]),a("h2",{attrs:{id:"add-your-token-in-the-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-your-token-in-the-configuration"}},[t._v("#")]),t._v(" Add Your Token in the Configuration")]),t._v(" "),a("p",[t._v("Navigate to the top-level folder of your app directory "),a("code",[t._v("myblockchain")]),t._v(" and use any text editor to edit the "),a("code",[t._v("config.yml")]),t._v(" file.")]),t._v(" "),a("p",[t._v("For the "),a("code",[t._v("accounts")]),t._v(" parameter, add your username and your new token:")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accounts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" username\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("coins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10000token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50000000stake"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000000000000mytoken"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Tip")]),t._v(" To add your coins, use a list of strings for the initial coins with denominations. You can follow the "),a("code",[t._v(".yml")]),t._v(" syntax for the auto-generated users "),a("code",[t._v("alice")]),t._v(" and "),a("code",[t._v("bob")]),t._v(".")]),t._v(" "),a("p",[t._v("The minimum reserve coin amount for a pool in the liquidity module is 1,000,000. Make sure you create enough tokens for your liquidity pools. This entry creates enough tokens to create 10 liquidity pools (1000000000000).")]),t._v(" "),a("h2",{attrs:{id:"start-your-blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-your-blockchain"}},[t._v("#")]),t._v(" Start Your Blockchain")]),t._v(" "),a("p",[t._v("To start your blockchain, run this command in your local terminal:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("starport chain serve\n")])])]),a("p",[t._v("You see output similar to the following output, but with different account passphrases and addresses:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Cosmos SDK's version is: Stargate v0.40.0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("or later"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nüîÑ Resetting the app state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nüõ†Ô∏è  Building proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nüì¶ Installing dependencies"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nüõ†Ô∏è  Building the blockchain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nüíø Initializing the app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nüôÇ Created account "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice"')]),t._v(" with address "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos1qur6tvu7p4khtr5zzcx0uk5fq06hfk5xflw83e"')]),t._v(" with mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tank film icon helmet myth devote velvet rib behind exhaust move pass endless combine bag congress pool bean shoulder issue trouble banner best nice"')]),t._v("\nüôÇ Created account "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob"')]),t._v(" with address "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos1w8w3t8rhv5zpvdscy9332wp4tugkg0ezskf95u"')]),t._v(" with mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"attract shoulder person upset dream category finish detect country track edge planet crack gloom soldier together hockey arena panel horn rapid zero common marriage"')]),t._v("\nüôÇ Created account "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v(" with address "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos1mr3ss57xexzg7j377vfd24d3vv3vy0e3mpuj6y"')]),t._v(" with mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"parent butter piece picnic north thumb knife denial toy silk juice diary cruise idle pink repair radar brisk decide sugar gap joke palm day"')]),t._v("\nGenesis transaction written to "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/Users/joy20/.myblockchaind/config/gentx/gentx-2e8a6a680b4f9adaecfafbc6ecad8b96ef8b9157.json"')]),t._v("\nüåç Tendermint node: http://0.0.0.0:26657\nüåç Blockchain API: http://0.0.0.0:1317\nüåç Token faucet: http://0.0.0.0:4500\n")])])]),a("p",[t._v("Be patient, using the "),a("code",[t._v("starport chain serve")]),t._v(" command is powerful and takes a few minutes. You are starting your sovereign application-specific blockchain in development and this command is doing all the work for you. Everything you need is being scaffolded so you can focus on business logic.")]),t._v(" "),a("h2",{attrs:{id:"configure-the-relayer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-relayer"}},[t._v("#")]),t._v(" Configure the Relayer")]),t._v(" "),a("p",[t._v("A relayer is software to connect two blockchains. Configure the relayer with your endpoints to create a connection between your blockchain and the testnet. After the connection is established, you can send tokens from one blockchain to the other blockchain.")]),t._v(" "),a("h3",{attrs:{id:"remove-existing-relayer-and-starport-configurations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove-existing-relayer-and-starport-configurations"}},[t._v("#")]),t._v(" Remove Existing Relayer and Starport Configurations")]),t._v(" "),a("p",[t._v("If you previously used the relayer, follow these steps to remove exiting relayer and Starport configurations:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Delete previous configuration files:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rm -r $HOME/.starport/*\n")])])])])]),t._v(" "),a("p",[t._v("If existing configurations do not exist, the command returns "),a("code",[t._v("no matches found")]),t._v(" and no action is taken.")]),t._v(" "),a("h3",{attrs:{id:"create-your-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-your-connection"}},[t._v("#")]),t._v(" Create Your Connection")]),t._v(" "),a("p",[t._v("Configure the relayer to create a connection between your local chain and the chain you want to connect to. In this example, the chain you want to connect to is the Gravity DEX testnet.")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[t._v("starport relayer configure\n")])])]),a("ul",[a("li",[a("p",[t._v("For the local "),a("code",[t._v("source")]),t._v(" chain, use the default values.")])]),t._v(" "),a("li",[a("p",[t._v("For the testnet "),a("code",[t._v("target")]),t._v(" chain, use the following values.")])]),t._v(" "),a("li",[a("p",[t._v("Target RPC: "),a("a",{attrs:{href:"https://rpc.testnet.cosmos.network:443",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://rpc.testnet.cosmos.network:443"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("Target Token Faucet: "),a("a",{attrs:{href:"https://faucet.testnet.cosmos.network:443",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://faucet.testnet.cosmos.network:443"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("Target Gas Price (0.025uatom): 0.025uphoton")])])]),t._v(" "),a("p",[t._v("When everything runs successfully, you see the following output with a different account address:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("üîê  Account on "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source"')]),t._v(" is "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos174n26d8n223aje53dznlfahpv54np970wr3ae7"')]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("¬∑ received coins from a faucet\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("¬∑ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("balance: 100000stake,5token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nüîê  Account on "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),t._v(" is "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cosmos174n26d8n223aje53dznlfahpv54np970wr3ae7"')]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("¬∑ received coins from a faucet\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("¬∑ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("balance: 10000000stake,10000000uphoton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n‚õì  Configured chains: myblockchain-cosmoshub-testnet\n")])])]),a("p",[t._v("Connect the chains:")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[t._v("starport relayer connect\n")])])]),a("p",[t._v("As your two blockchains start to connect, you see output like:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("‚ó£ Linking paths between chains"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". \n")])])]),a("p",[t._v("When successful, your output shows:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\n---------------------------------------------\nLinking chains\n---------------------------------------------\n\n‚úì Linked chains with "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" paths.\n  - myblockchain-cosmoshub-testnet\n\nContinuing with "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" paths"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n---------------------------------------------\nChains by paths\n---------------------------------------------\n\nmyblockchain-cosmoshub-testnet:\n    myblockchain      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port: transfer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel: channel-0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    cosmoshub-testnet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port: transfer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel: channel-9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n---------------------------------------------\nListening and relaying packets between chains"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n---------------------------------------------\n")])])]),a("h2",{attrs:{id:"get-token-from-the-faucet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-token-from-the-faucet"}},[t._v("#")]),t._v(" Get Token From the Faucet")]),t._v(" "),a("p",[t._v("From the terminal output that "),a("code",[t._v("starport chain serve")]),t._v(" created for you, use the "),a("code",[t._v("username")]),t._v(" account address to claim tokens from the faucet.")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[t._v('curl -X POST -d \'{"address": "cosmosxxxxx"}\' https://faucet.testnet.cosmos.network\n')])])]),a("ul",[a("li",[t._v("Make sure to add your account address into the "),a("code",[t._v("address")]),t._v(" field")]),t._v(" "),a("li",[t._v("Replace "),a("code",[t._v("cosmosxxxxx")]),t._v(" with the address you saw in your user account when you run the "),a("code",[t._v("starport chain serve")]),t._v(" command")])]),t._v(" "),a("p",[t._v("After you see the success message, you can check your balance.")]),t._v(" "),a("p",[t._v("See your balance at "),a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/"),a("OutboundLink")],1),t._v(". Make sure to replace "),a("code",[t._v("cosmosxxxxx")]),t._v(" with your address.")]),t._v(" "),a("h2",{attrs:{id:"send-your-own-token-to-the-testnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-your-own-token-to-the-testnet"}},[t._v("#")]),t._v(" Send Your Own Token to the Testnet")]),t._v(" "),a("p",[t._v("Now that your account on testnet is funded with testnet tokens, you can send your own token to the testnet.")]),t._v(" "),a("p",[t._v("At your local terminal, enter the IBC module command to transfer your token to the testnet.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("myblockchaind tx ibc-transfer transfer transfer channel-0 cosmosxxxxx "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"15000000mytoken"')]),t._v(" --from username\n")])])]),a("p",[t._v("Make sure to replace:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cosmosxxxxx")]),t._v(" with your address")]),t._v(" "),a("li",[a("code",[t._v("mytoken")]),t._v(" with your token name")]),t._v(" "),a("li",[a("code",[t._v("username")]),t._v(" with your username")]),t._v(" "),a("li",[a("code",[t._v("channel-0")]),t._v(" with the channel that is shown in the terminal where you ran the "),a("code",[t._v("starport relayer connect")]),t._v(" command")])]),t._v(" "),a("p",[a("strong",[t._v("Tip:")]),t._v(" Sometimes transactions don't go through on the first try. Make sure you check the terminal window that shows the relayer process and verify that you see output similar to the following output:")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[t._v("Relay 1 packets from myblockchain => cosmoshub-testnet\nRelay 1 packets from myblockchain => cosmoshub-testnet\nRelay 1 acks from cosmoshub-testnet => myblockchain\nRelay 1 acks from cosmoshub-testnet => myblockchain\n")])])]),a("p",[t._v("After your transaction is complete, check your balance on the Gravity DEX testnet to confirm your token transfer.")]),t._v(" "),a("p",[t._v("See your balance at "),a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Take a closer look at the "),a("code",[t._v("ibc/denomhash")]),t._v(". When you create a new pool, you use this denom to create a pair with one of the existing native tokens. On the testnet, create a pair with "),a("code",[t._v("uphoton")]),t._v(" and the "),a("code",[t._v("ibc/denomhash")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Tip:")]),t._v(" To query the balance of "),a("code",[t._v("uphoton")]),t._v(" and "),a("code",[t._v("ibc/denomhash")]),t._v(" on your terminal:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad query bank balances cosmosxxxx --node https://testnet.cosmos.network:443\n")])])]),a("p",[t._v("After you successfully query the balance, you see an output similar to:")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[t._v("balances:\n"),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(' amount: "13500000"\n  denom: ibc/2A399B0A1E83C2929B7C07E12B86F72EF4B4252ECB95A895BB51C2C00A106370\n'),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(' amount: "258850000"\n  denom: uphoton\npagination:\n  next_key: null\n  total: "0"\n')])])]),a("h2",{attrs:{id:"create-a-pool-with-my-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-pool-with-my-token"}},[t._v("#")]),t._v(" Create a Pool with My Token")]),t._v(" "),a("p",[t._v("With the liquidity module and gaiad binary installed, use these links to explore your app:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("RPC "),a("a",{attrs:{href:"https://rpc.testnet.cosmos.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://rpc.testnet.cosmos.network:443"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("API "),a("a",{attrs:{href:"https://api.testnet.cosmos.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network:443"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("gRPC "),a("a",{attrs:{href:"https://grpc.testnet.cosmos.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://grpc.testnet.cosmos.network:443"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("Token faucet "),a("a",{attrs:{href:"https://faucet.testnet.cosmos.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://faucet.testnet.cosmos.network:443"),a("OutboundLink")],1)])])]),t._v(" "),a("h3",{attrs:{id:"verify-your-token-supply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verify-your-token-supply"}},[t._v("#")]),t._v(" Verify Your Token Supply")]),t._v(" "),a("p",[t._v("You can view all available tokens. You can see your token, because your token is now listed!")]),t._v(" "),a("p",[t._v("Check the following resources to get an overview of the activity on the testnet and find your token.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/supply")])]),t._v(" "),a("li",[a("p",[t._v("https://api.testnet.cosmos.network/ibc/applications/transfer/v1beta1/denom_traces")])])]),t._v(" "),a("h2",{attrs:{id:"add-your-starport-blockchain-account-to-gaiad"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-your-starport-blockchain-account-to-gaiad"}},[t._v("#")]),t._v(" Add your Starport blockchain account to gaiad")]),t._v(" "),a("p",[t._v("To access Starport "),a("code",[t._v("username")]),t._v(" account on "),a("code",[t._v("gaiad")]),t._v(", add the "),a("code",[t._v("username")]),t._v(" account to the keychain:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad keys "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" username --recover\n")])])]),a("p",[t._v("You are prompted for your passphrase:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Enter your bip39 mnemonic\n")])])]),a("p",[t._v("Remember, you can see the "),a("code",[t._v("username")]),t._v(" mnemonic passphrase in the terminal window where you ran the "),a("code",[t._v("starport chain serve")]),t._v(" command on your "),a("code",[t._v("myblockchaind")]),t._v(".")]),t._v(" "),a("p",[t._v("After you successfully enter your mnemonic, you see output similar to:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("- name: username\n  type: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v("\n  address: cosmos1780t4erzwrvr9x6jvqjxduwkuk3ex3fnhqzza5\n  pubkey: cosmospub1addwnpepqfs05yqcjghqzct5y39r33r5ew47pjqkvcj7ezngufazy0eqsyx65vtut0h\n  mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  threshold: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  pubkeys: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"create-a-liquidity-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-liquidity-pool"}},[t._v("#")]),t._v(" Create a Liquidity Pool")]),t._v(" "),a("p",[t._v("To create a liquidity pool with the "),a("code",[t._v("gaiad tx liquidity create-pool")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad tx liquidity create-pool "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 1100000uphoton,1500000ibc/longibchash --from username --chain-id cosmoshub-testnet --gas-prices "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.025uphoton"')]),t._v(" --node https://rpc.testnet.cosmos.network:443 --gas "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),t._v("\n")])])]),a("p",[t._v("where:")]),t._v(" "),a("ul",[a("li",[t._v("1 is the type of pool to create")]),t._v(" "),a("li",[t._v("1100000uphoton,1500000ibc/longibchash is the token pair of the pool")])]),t._v(" "),a("p",[t._v("For this example command, be sure to:")]),t._v(" "),a("ul",[a("li",[t._v("Replace "),a("code",[t._v("longibchash")]),t._v(" with the hash denom that you received when you query the balance")]),t._v(" "),a("li",[t._v("Replace "),a("code",[t._v("username")]),t._v(" with your account username")])]),t._v(" "),a("p",[t._v("To confirm the pool has been created:")]),t._v(" "),a("ul",[a("li",[t._v("Visit\n"),a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/liquidity/v1beta1/pools",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/liquidity/v1beta1/pools"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("Tip:")]),t._v(" Verify the pool created on terminal:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad query liquidity pools\n")])])]),a("p",[t._v("After you successfully query the pool you should see an output similar to:")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(' id: "1"\n  pool_coin_denom: poolF4E2371BB7E34567B5A91A44808B8470BFAE0ABD606D707A8F1D59A3EB164816\n  reserve_account_address: cosmos17n3rwxahudzk0ddfrfzgpzuywzl6uz4alp5z2l\n  reserve_coin_denoms:\n  '),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" ibc/32023ECF96BB757261CB59A37F9013D012969795D12D24FCCE50CBE5F879C920\n  "),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" uphoton\n  type_id: 1\n  .\n  .\n  .\n"),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(' id: "6"\n  pool_coin_denom: poolFE384B6C9AE769A67754EAD275832A5A6DAA6E2C769A1E1D281E596DD47AA36D\n  reserve_account_address: cosmos1lcuykmy6ua56va65atf8tqe2tfk65m3v58zq6n\n  reserve_coin_denoms:\n  '),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" ibc/2A399B0A1E83C2929B7C07E12B86F72EF4B4252ECB95A895BB51C2C00A106370\n  "),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" uphoton\n  type_id: 1\n")])])]),a("p",[t._v("You can also query a specific pool by "),a("code",[t._v("id")]),t._v(" using the following command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad query liquidity pool "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),a("p",[t._v("Make sure to replace "),a("code",[t._v("6")]),t._v(" with your pool id.")]),t._v(" "),a("h2",{attrs:{id:"swap-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swap-token"}},[t._v("#")]),t._v(" Swap Token")]),t._v(" "),a("p",[t._v("You are ready to swap tokens! You now have uphoton token in your account and want to swap for the new IBC coin:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad tx liquidity swap "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 100000uphoton ibc/longibchash "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.003")]),t._v(" --from username --chain-id cosmoshub-testnet --gas-prices "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.025uphoton"')]),t._v(" --node https://rpc.testnet.cosmos.network:443\n")])])]),a("p",[t._v("Make sure to replace the "),a("code",[t._v("1")]),t._v(" with your pool "),a("code",[t._v("id")]),t._v(" (the pool id is assigned at creation).")]),t._v(" "),a("p",[t._v("where:")]),t._v(" "),a("ul",[a("li",[t._v("1 is your pool id (the pool id is assigned at creation)")]),t._v(" "),a("li",[t._v("1 is instant swap type")]),t._v(" "),a("li",[t._v("100000uphoton is first token in the pair")]),t._v(" "),a("li",[t._v("ibc/longibchash is the second token in the pair")]),t._v(" "),a("li",[t._v("0.1 the order price")]),t._v(" "),a("li",[t._v("0.003 the swap fee for the tx")])]),t._v(" "),a("p",[t._v("Check the balance on the new account that made the trade:")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Make sure to replace "),a("code",[t._v("cosmosxxxxx")]),t._v(" with your address.")]),t._v(" "),a("h2",{attrs:{id:"deposit-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deposit-token"}},[t._v("#")]),t._v(" Deposit Token")]),t._v(" "),a("p",[t._v("You can deposit tokens to the pool you have created.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad tx liquidity deposit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 100uphoton,100ibc/longibchash --from username --chain-id cosmoshub-testnet --gas-prices "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.025uphoton"')]),t._v(" --node https://rpc.testnet.cosmos.network:443\n")])])]),a("p",[t._v("Make sure to replace the "),a("code",[t._v("1")]),t._v(" with your pool "),a("code",[t._v("id")]),t._v(" (the pool id is assigned at creation).")]),t._v(" "),a("p",[a("strong",[t._v("Note:")]),t._v(" Deposits must be the same coin denoms as the reserve coins.")]),t._v(" "),a("p",[t._v("Check the balance on the new deposit that you made.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Make sure to replace "),a("code",[t._v("cosmosxxxxx")]),t._v(" with your address.")]),t._v(" "),a("h2",{attrs:{id:"withdraw-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withdraw-token"}},[t._v("#")]),t._v(" Withdraw Token")]),t._v(" "),a("p",[t._v("You can also withdraw tokens from the pool you have created.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("gaiad tx liquidity withdraw "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" pool-coin --from username --chain-id cosmoshub-testnet --gas-prices "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.025uphoton"')]),t._v(" --node https://rpc.testnet.cosmos.network:443\n")])])]),a("p",[t._v("where:")]),t._v(" "),a("ul",[a("li",[t._v("1 is the pool id that was assigned at pool creation")]),t._v(" "),a("li",[t._v("pool-coin the denom of the liquidity pool, in this case the token pair")])]),t._v(" "),a("p",[t._v("Make sure to replace the "),a("code",[t._v("1")]),t._v(" with your pool "),a("code",[t._v("id")]),t._v(" (the pool id is assigned at creation).")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Replace "),a("code",[t._v("pool-id")]),t._v(" with the id that you can see on\n"),a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("You see a pool id that is similar to "),a("code",[t._v("poolFE384B6C9AE769A67754EAD275832A5A6DAA6E2C769A1E1D281E596DD47AA36D")]),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("Replace "),a("code",[t._v("cosmosxxxxx")]),t._v(" with your address")])])]),t._v(" "),a("p",[t._v("Check the balance on the new withdrawal that you made:")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.testnet.cosmos.network/cosmos/bank/v1beta1/balances/cosmosxxx"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"üéâ-congratulations-üéâ"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#üéâ-congratulations-üéâ"}},[t._v("#")]),t._v(" üéâ Congratulations üéâ")]),t._v(" "),a("p",[t._v("By completing this tutorial you have learned how to use liquidity module.")]),t._v(" "),a("p",[t._v("Here‚Äôs what you accomplished in this tutorial:")]),t._v(" "),a("ul",[a("li",[t._v("Created a blockchain with Starport and connecting to testnet")]),t._v(" "),a("li",[t._v("Created a liquidity pool with IBC token")]),t._v(" "),a("li",[t._v("Swapped tokens within the pool")]),t._v(" "),a("li",[t._v("Deposited tokens to the pool")]),t._v(" "),a("li",[t._v("Withdrew tokens from the pool")])])])}),[],!1,null,null,null);e.default=o.exports}}]);